import math
import matplotlib.pyplot as plt
import keras
import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from keras.callbacks import EarlyStopping

#importing data and making numerical
x=pd.read_csv("HistoricalData_1742777138822.csv")
for i in range(len(x)):
  a=float(x.loc[i,'Close/Last'].strip('\n').strip('$'))
  x.loc[i,'Close/Last']=a

#seperating data, 80/20 split
train = x.iloc[:800, 1:2].values
test = x.iloc[800:, 1:2].values

#normalizing
sc = MinMaxScaler(feature_range = (0, 1))
training_scaled = sc.fit_transform(train)

#setting up data + adding lag
lag=1
X_train = []
y_train = []
for i in range(60, len(train)-lag):
    X_train.append(training_scaled[i-60:i, 0])
    y_train.append(training_scaled[i+lag, 0])
X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

#creating model
model = Sequential()

model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

model.add(LSTM(units = 50))
model.add(Dropout(0.2))

# Adding the output layer
model.add(Dense(units = 1))

#training model
model.compile(optimizer = 'adam', loss = 'mean_squared_error')
model.fit(X_train, y_train, epochs = 100, batch_size = 32)

#gathering data to test w model
dataset_train = x.iloc[:800, 1:2]
dataset_test = x.iloc[800:, 1:2]
dataset_total = pd.concat((dataset_train, dataset_test), axis = 0)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values
inputs = inputs.reshape(-1,1)
inputs = sc.transform(inputs)
X_test = []
for i in range(60, len(test)):
    X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

#visualize
predicted_stock_price = model.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)
plt.plot(x.loc[800:len(x)-61, 'Date'],dataset_test.values[:-60], color = 'red', label = 'Real TESLA Stock Price')
plt.plot(x.loc[800:len(x)-61, 'Date'],predicted_stock_price, color = 'blue', label = 'Predicted TESLA Stock Price')
plt.xticks(np.arange(0,len(test)-60,50))
plt.title('Meta Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Meta Stock Price')
plt.legend()
plt.show()
